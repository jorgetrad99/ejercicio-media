{"version":3,"sources":["formula.svg","App/index.jsx","reportWebVitals.js","index.js"],"names":["App","useState","array","setArray","sumOfNumbers","amountOfNumbers","result","setResult","blankResultField","useEffect","console","log","Fragment","className","type","onClick","Math","floor","random","provisionalArray","i","push","pop","popedArray","min","minLength","pattern","id","placeholder","required","input","document","getElementById","value","number","Number","oldArray","alert","JSON","stringify","length","reduce","preValue","currentValue","src","formula","width","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fec85e78.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/formula.0aaebedc.svg\";","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport formula from '../formula.svg';\n\nfunction App() {\n  const [ array, setArray] = useState([]);\n  const [ result, setResult ] = useState({\n    sumOfNumbers: null,\n    amountOfNumbers: null\n  })\n\n  const blankResultField = () => {\n    setResult({\n      amountOfNumbers: null,\n      sumOfNumbers: null\n    });\n  }\n\n  const blankInputFiled = () => {\n    var input = document.getElementById(\"add-number-input\");\n    input.value = \"\";\n  }\n\n  const randomArray = () => {\n    if(result.amountOfNumbers !== null && result.sumOfNumbers !== null) {\n      blankResultField();\n    }\n    const amountOfNumbers = Math.floor(Math.random() * (30 - 5) + 5);\n    /* console.log(amountOfNumbers); */\n    let provisionalArray = [];\n    for(let i = 0; i < amountOfNumbers; i ++) {\n      provisionalArray.push(Math.floor(Math.random() * 100));\n    }\n    setArray(provisionalArray);\n  }\n\n  const resetArray = () => {\n    setArray([]);\n    blankResultField();\n  }\n\n  const addNumber = () => {\n    const input = document.getElementById(\"add-number-input\").value;\n    if(input) {\n      const number = Number(input);\n      if(number >= 0){\n        setArray( oldArray => [...oldArray, number]);\n      } else {\n        alert('Negative numbers are not allowed');\n      }\n      blankInputFiled();\n    } else {\n      alert('Type a number');\n    }\n  }\n\n  const popArrayElement = () => {\n    console.log('Array original: ' + array)\n    array.pop();\n    const popedArray = array;\n    console.log('Array popeado: ' + popedArray)\n    setArray(() => [...popedArray]);\n    console.log('Nuevo Array: ' + array);\n  }\n\n  const calculateSampleVariance = () => {\n    if(array.length !== 0) {\n      const sumOfNumbers = array.reduce((preValue = 0, currentValue) => {\n        return preValue + currentValue;\n      })\n      const amountOfNumbers = array.length;\n\n      setResult({\n        amountOfNumbers: amountOfNumbers,\n        sumOfNumbers: sumOfNumbers\n      });\n    } else {\n      alert('Insert an element into the array');\n    }\n    /* console.log(result.amountOfNumbers + result.sumOfNumbers); */\n    \n  }\n\n  useEffect(() => {\n    console.log(array);\n  }, [array, result]);\n\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Sample Variance Excercise</h1>\n        </header>  \n        <main>\n          <p>Let's Calculate the sample variance of an array of numbers.</p>\n          <button type=\"button\" onClick={randomArray}>Random Array</button>\n          <button type=\"button\" onClick={resetArray}>Reset Array</button>\n          <button type=\"button\" onClick={popArrayElement}>Pop last element</button>\n          <div className=\"container-input\">\n            <div>\n              <input type=\"number\" min=\"0\" minLength=\"1\" pattern=\"[0-9]*\" id=\"add-number-input\" placeholder=\"Type a number...\" required />\n              <button type=\"button\" onClick={addNumber}>Add number</button>\n            </div>\n          </div>\n          <p>Array:</p>\n          <br />\n          <p className=\"showing-array\">{JSON.stringify(array)}</p>\n          \n          { \n            (array.length !== 0) && \n              <button type=\"button\" onClick={calculateSampleVariance}>\n                Calculate\n              </button>\n          }\n          \n          \n          \n          { (result.amountOfNumbers !== null && result.sumOfNumbers !== null) &&\n            <React.Fragment>\n              <h3>Applying the mean formula to obtain the result</h3>\n              <br />\n              <img src={formula} width=\"320rem\" alt=\"Formula of the sample variance\" />\n              <br />\n              <br />\n              <p>Sum of the Terms: {result.sumOfNumbers}</p>\n              <div id=\"container-line\">\n                <hr width=\"250rem\" />\n              </div>\n              <p>Number of the Terms: {result.amountOfNumbers}</p>\n              <br />\n              <h3>Calculated sample variance:</h3>\n              <p>{result.sumOfNumbers / result.amountOfNumbers}</p>\n              <br />\n            </React.Fragment>\n          }\n          \n          \n\n        </main>\n      </div>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/index.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}